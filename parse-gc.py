#! /usr/bin/env python
"""
 Version: 0.9
 Requires: sys, optparse
 Date: 2011-12-04 13:38
 Author: Andreas Paul
"""

desc = """Parse and record gc logs generated by the JVM."""

epilog = """Example call:
%prog -c config/example.conf"""

import os
import sys
from optparse import OptionParser
import ConfigParser

from lib import *

def main():
    """ Parse gc logs generated by the JVM

    Desc:
        Will print GC metrics in JSON format for every line it can parse.
        Collected data can be cleared if the URI in the GET 
            requests contains reset=1

    Args:
        None

    Returns:
        0: If everything is OK
    """

    usage = 'usage: %prog -c CONFIGFILE'
    parser = OptionParser(usage, version='%prog 0.9',
                                description=desc)

    parser.add_option('-c', '--configfile', dest='configfile',
                    help='configfile with gc logs you want to parse')
    parser.add_option('-p', '--port', dest='port', default='5000', type='int',
                    help='port at which the HTTP server will run')

    (options, args) = parser.parse_args()

    # Making sure all mandatory options appeared.
    mandatories = {'configfile': 'c'}

    for m in mandatories:
        if not options.__dict__[m]:
            print ('mandatory option -%s for %s is missing! Try --help' % (
                    mandatories[m], m))
            sys.exit(1)

    if not os.path.exists(options.configfile):
        print 'config file %s not found!' % options.configfile
        sys.exit(1)

    config = ConfigParser.ConfigParser()
    config.read(options.configfile)

    if options.port:
        port = options.port # Port parameter has priority
    elif config.has_section('general') and config.has_option('general', 'port'):
        port = config.getint('general', 'port')
    else:
        port = 5000 # Default value
    if config.has_option('general', 'sleep'):
        sleep = config.getfloat('general', 'sleep')
    else:
        sleep = 1 # Default value
    config.remove_section('general')

    services = []
    for service in config.options('services'):
        if config.has_option('services', service):
            services.append({'name': service, 'sleep': sleep,
                'logfile': config.get('services', service)})

        #print 'using services:', services
        #print len(services)

    Server.Server(port, services)
    return 0


if __name__ == '__main__' or __name__ == sys.argv[0]:
    sys.exit(main())    # call main subroutine

